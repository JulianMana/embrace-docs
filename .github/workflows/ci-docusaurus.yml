name: CI

on:
  pull_request:
  push:
    branches: [ master ]
  release:
    types: [ released ]
  workflow_dispatch:

# These permissions are needed to interact with GitHub's OIDC Token endpoint
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  AWS_DEFAULT_REGION: 'us-west-2'

jobs:
  environment:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.choose_environment.outputs.name }}
      AWS_S3_BUCKET: ${{ steps.choose_environment.outputs.AWS_S3_BUCKET }}
      AWS_CLOUDFRONT_ID: ${{ steps.choose_environment.outputs.AWS_CLOUDFRONT_ID }}
      URL: ${{ steps.choose_environment.outputs.URL }}
      BASE_URL: ${{ steps.choose_environment.outputs.BASE_URL }}
    steps:
      - name: Choose environment
        id: choose_environment
        run: |
          if [ '${{ github.event_name }}/${{ github.event.action }}' == 'release/released' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
              echo 'name=production' >> $GITHUB_OUTPUT
              echo 'AWS_S3_BUCKET=prod.embrace.io-docs' >> $GITHUB_OUTPUT
              echo 'AWS_CLOUDFRONT_ID=EMBBYTO7JVZ55' >> $GITHUB_OUTPUT
              echo 'URL=https://embrace.io' >> $GITHUB_OUTPUT
              echo 'BASE_URL=/docs' >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/master" ]; then
              echo 'name=staging' >> $GITHUB_OUTPUT
              echo 'AWS_S3_BUCKET=dev.embrace.io-docs' >> $GITHUB_OUTPUT
              echo 'AWS_CLOUDFRONT_ID=E20WGO1Z361L37' >> $GITHUB_OUTPUT
              echo 'URL=https://dev.embrace.io' >> $GITHUB_OUTPUT
              echo 'BASE_URL=/docs' >> $GITHUB_OUTPUT
          else
              echo 'name=development' >> $GITHUB_OUTPUT
              echo 'AWS_S3_BUCKET=dev.embrace.io-docs' >> $GITHUB_OUTPUT
              echo 'AWS_CLOUDFRONT_ID=E20WGO1Z361L37' >> $GITHUB_OUTPUT # NOTE: we aren't actually using a CDN for dev, we link directly to https://bucket.s3/url/
              echo 'URL=http://dev.embrace.io-docs.s3-website-us-west-2.amazonaws.com' >> $GITHUB_OUTPUT # NOTE: Yes, it is http://
              echo 'BASE_URL=/docs-pr${{ github.event.number }}' >> $GITHUB_OUTPUT
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: environment
    environment:
      name: ${{ needs.environment.outputs.name }}
      url: ${{ needs.environment.outputs.URL }}${{ needs.environment.outputs.BASE_URL }}/
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Docusaurus
        run: |
          npm install

      - name: Run Docusaurus build to generate HTML
        env:
          # These are read by docusaurus.config.js
          URL: ${{ needs.environment.outputs.URL }}
          BASE_URL: ${{ needs.environment.outputs.BASE_URL }}
        run: |
          npm run docusaurus build
          git log -1 > build/version.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_LOGIN_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume AWS role
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
            pip install --upgrade awscli
            credentials=$( aws sts assume-role --role-arn "${{ secrets.AWS_ASSUME_ROLE }}" --role-session-name "`echo $GITHUB_REPOSITORY | tr "/" "-"`" )
            echo "AWS_ACCESS_KEY_ID=`echo $credentials | jq -r .Credentials.AccessKeyId`" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=`echo $credentials | jq -r .Credentials.SecretAccessKey`" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=`echo $credentials | jq -r .Credentials.SessionToken`" >> $GITHUB_ENV

      - name: Sync to S3 bucket
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          aws s3 sync --acl public-read --delete build/ s3://${{ needs.environment.outputs.AWS_S3_BUCKET }}${{ needs.environment.outputs.BASE_URL }}/

      - name: Add pull request comment
        if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Preview of ${{ github.sha }} deployed to: ${{ needs.environment.outputs.URL }}${{ needs.environment.outputs.BASE_URL }}/'
            })

      - name: Invalidate CloudFront cache
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ needs.environment.outputs.AWS_CLOUDFRONT_ID }} --paths '/docs*'
