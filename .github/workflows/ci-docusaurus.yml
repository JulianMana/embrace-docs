name: CI

env:
  AWS_DEFAULT_REGION: 'us-west-2'

  # https://embrace.io/docs/
  # https://console.aws.amazon.com/cloudfront/home?region=us-west-2#distribution-settings:ENILO2YUDEJ88
  PROD_AWS_S3_BUCKET: prod.embrace.io-docs
  PROD_AWS_CLOUDFRONT_ID: ENILO2YUDEJ88

  # https://dev.embrace.io/docs/
  # https://console.aws.amazon.com/cloudfront/home?region=us-west-2#distribution-settings:E20WGO1Z361L37
  STG_AWS_S3_BUCKET: dev.embrace.io-docs
  STG_AWS_CLOUDFRONT_ID: E20WGO1Z361L37

  # https://<url>/docs-prNNN/
  DEV_AWS_S3_BUCKET: dev.embrace.io-docs
  DEV_AWS_CLOUDFRONT_ID: E20WGO1Z361L37 # NOTE: we aren't actually using a CDN for dev

on:
  pull_request:
  push:
    branches: [ master ]
  release:
    types: [ released ]
  workflow_dispatch:

# These permissions are needed to interact with GitHub's OIDC Token endpoint
permissions:
  id-token: write
  contents: read

jobs:
  docusaurus-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install Docusaurus
        run: |
          npm install

      - name: Destination Development
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "AWS_S3_BUCKET=${{ env.DEV_AWS_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_CLOUDFRONT_ID=${{ env.DEV_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV

          # See docusaurus.config.js
          echo "URL=http://${{ env.DEV_AWS_S3_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com" >> $GITHUB_ENV
          echo "BASE_URL=/docs-pr${{ github.event.number }}" >> $GITHUB_ENV

      - name: Destination Staging
        if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
        run: |
          echo "AWS_S3_BUCKET=${{ env.STG_AWS_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_CLOUDFRONT_ID=${{ env.STG_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
          echo "URL=https://dev.embrace.io" >> $GITHUB_ENV
          echo "BASE_URL=/docs" >> $GITHUB_ENV

      - name: Destination Production
        if: ${{ github.event_name == 'release' && github.event.action == 'released' }}
        run: |
          echo "AWS_S3_BUCKET=${{ env.PROD_AWS_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_CLOUDFRONT_ID=${{ env.PROD_AWS_CLOUDFRONT_ID }}" >> $GITHUB_ENV
          echo "URL=https://embrace.io" >> $GITHUB_ENV
          echo "BASE_URL=/docs" >> $GITHUB_ENV

      - name: Docusaurus Build
        run: |
          npm run docusaurus build


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_LOGIN_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Assume AWS role Development
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' }}
        run: |
            pip install --upgrade awscli
            credentials=$( aws sts assume-role --role-arn "${{ secrets.AWS_ASSUME_ROLE }}" --role-session-name "`echo $GITHUB_REPOSITORY | tr "/" "-"`" )
            echo "AWS_ACCESS_KEY_ID=`echo $credentials | jq -r .Credentials.AccessKeyId`" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=`echo $credentials | jq -r .Credentials.SecretAccessKey`" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=`echo $credentials | jq -r .Credentials.SessionToken`" >> $GITHUB_ENV

      - name: Sync to S3 bucket
        if: ${{ github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' }}
        run: |
          aws s3 sync --acl public-read --delete build/ s3://${{ env.AWS_S3_BUCKET }}${{ env.BASE_URL }}/

      - name: Add Pull Request Comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Preview deployed to: ${{ env.URL }}${{ env.BASE_URL }}/'
            })

      - name: Invalidate CloudFront cache
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        env:
          # From https://console.aws.amazon.com/iam/home?region=us-west-2#/users/travis-website?section=security_credentials
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.AWS_CLOUDFRONT_ID }} --paths '/*'
